#!/usr/bin/env python3

import sys
import math

argv = sys.argv
argc = len(sys.argv)

#Explication descriptive utilisation des flags
def desc_flag():
    print("USAGE")
    print("    ./105torus opt a0 a1 a2 a3 a4 n\n")
    print("DESCRIPTION")
    print("    opt       method option:")
    print("                  1 for the bisection method")
    print("                  2 for Newton's method")
    print("                  3 for the secant method")
    print("    a[0-4]    coefficients of the equation")
    print("    n         precision (the application of the polynomial to the solution")
    print("              should be smaller than 10^-n)")

#Checking des erreurs d'arguments et mauvais inputs
#Erreurs : pas d'arguments, trop d'arguments, precision inferieure à zero
#mauvais type d'argument, opt différent de 1/2/3
def verif_err(argv):
    if   argc == 1:
        print("There are no arguments, they are meant to be used.")
        sys.exit(84)
    elif argc == 2 and argv[1] == "-h":
        desc_flag()
        sys.exit(0)
    elif argc != 8:
        print("You need at least 7 arguments.")
        sys.exit(84)
    elif argv[7] <= '0':
        print("Precision can not be less or equal to 0")
        sys.exit(84)
    i = 1
    while i < 8:
        try: int(argv[i])
        except:
            print("Bad type of argument, enter an integer.")
            sys.exit(84)
        i += i
    if int(argv[1]) < 1 or int(argv[1]) > 3:
        print("There are no more than 3 opt possibilities.")
        sys.exit(84)

#Définition équation du quatrième degré
def equation_4th(x):
    eqt = (a4 * (x**4) + a3 * (x**3) + a2 * (x**2) + a1 * x  + a0)
    return (eqt)

#Définition dérivée équation 4ème degré pour algo de newton
def derived_equa(x):
    fct = (4 * a4 * (x**3) + 3 * a3 * (x**2) + 2 * a2 * x + a1)
    return (fct)

#Défintion algo méthode sécante
#"-precision" = à quel point la solution sera précise
#l64 : valeur s calculée à partir de la formule de la méthode sécante
# "s = b - f(b) * (b - a) / (f(b) - f(a))"
#condition en if/else : si n est un entier, il est print tel quel(l70)
#sinon il est imprimé en décimal avec n la précision
def secant_algo(precision):
    a = 0
    b = 1

    while (abs(a - b) > (10**(-precision))):
        s = b - ((b - a) / (equation_4th(b) - equation_4th(a))) * equation_4th(b)
        a = b
        b = s
        if (10 **n) * s % 1 == 0:
            print("x =", s)
        else:
            print("x = %.*f" % (n, s))

#Définition algo de newton
#s = estimation racine, c = estimation précédente, analyse = suivante
#permettent approximation via une suite d'itérations
#premier if/else = print integer ou décimal
#l93 utilisation de la fomule de newton "x = x - f(x) / f'(x)" avec f' la dérivée
#si le nombre d'itérations est supérieur à limite imposée, renvoyer erreur
def newton_algo(precision):
    s = 0.5
    c = 0
    analyse = 0

    while (abs(c - s) > 10**(-precision)):
        c = s
        analyse += 1
        if (10**n * s % 1) == 0:
            print("x =", s)
        else:
            print("x = %.*f" % (n, s))
        s = s - (equation_4th(s) / derived_equa(s))
        if (analyse > 15):
            print("ERROR !!!")
            sys.exit(84)

#Défintion méthode de bisection
#boucle while/if : formule = s'execute jusqu'à ce que la valeur absolue de la différence entre c et s sois moins de 10**(-precision)
#second if/else = décimal ou integer
def bisect_algo(precision):
    a  = 0
    b  = 1
    a_4th = equation_4th(a)
    b_4th = equation_4th(b)
    c  = 0
    i  = 0
    s  = 1
    while abs(c - s) > (10**(-precision)):
        s = c
        c = (a + b)/ 2
        if a_4th * equation_4th(c) < 0:
            b = c
        else:
            a = c
        if (10**n) * c % 1 == 0:
            print("x =", c)
        else:
            print("x = %.*f" % (n, c))

#Fonction principale du programme
#d'abord checking error des arg value
#si arguments valides, définit les options, et arguments aux valeurs entrées
verif_err(argv)
global opt, a0, a1, a2, a3, a4, n

#définition positions des arguments dans la string
opt = int(argv[1])
a0  = int(argv[2])
a1  = int(argv[3])
a2  = int(argv[4])
a3  = int(argv[5])
a4  = int(argv[6])
n   = int(argv[7])

#définit l'algo à utiliser en fonction de l'input
if opt == 1:
    bisect_algo(n)
if opt == 2:
    newton_algo(n)
if opt == 3:
    secant_algo(n)
